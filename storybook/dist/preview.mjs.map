{"version":3,"sources":["../src/preview.ts"],"names":["global","getFrameworkOptions","decorators","StoryFn","context","server"],"mappings":"AAEA,OAAS,UAAAA,MAAe,oBAGxB,SAASC,GAAsB,CAE3B,OAAOD,EAAO,iBAClB,CAMO,IAAME,EAAa,CACtB,CAACC,EAAkCC,IAAoC,CACrE,GAAM,CAAE,OAAAC,EAAS,CAAC,CAAE,EAAID,EAAQ,WAEhC,OAAIC,EAAO,MAAQ,SACfA,EAAO,IAAM,GAAGJ,EAAoB,EAAE,QAAQ,MAAM,sBAGxDG,EAAQ,WAAW,OAASC,EAErBF,EAAQ,CACjB,CACJ","sourcesContent":["import type { Renderer } from \"@storybook/types\";\nimport { PartialStoryFn as StoryFunction, StoryContext } from '@storybook/types';\nimport { global }  from '@storybook/global'\nimport { FrameworkOptions } from './types';\n\nfunction getFrameworkOptions() {\n    // @ts-ignore\n    return global.FRAMEWORK_OPTIONS as FrameworkOptions;\n}\n\n\n/**\n * Decorator to set server URL\n */\nexport const decorators = [\n    (StoryFn: StoryFunction<Renderer>, context: StoryContext<Renderer>) => {\n      const { server = {} } = context.parameters;\n\n      if (server.url === undefined) {\n          server.url = `${getFrameworkOptions().symfony.server}/_storybook/render`;\n      }\n\n      context.parameters.server = server;\n\n      return StoryFn();\n    }\n];\n"]}