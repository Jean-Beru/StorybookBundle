{"version":3,"sources":["../src/utils/twig.ts"],"names":["XMLParser","TwigTemplate","source","components","parseSubComponents","reservedNames","tagRe","functionRe","documentObj","lookupComponents","obj","names","key","value","m","name","twig","values","rawSource"],"mappings":"AAAA,OAAS,aAAAA,MAAgB,kBAElB,IAAMC,EAAN,KAAmB,CACtB,YAA6BC,EAAiCC,EAAsB,CAAvD,YAAAD,EAAiC,gBAAAC,EAC1D,KAAK,OAASD,CAClB,CAEA,WAAY,CACR,OAAO,KAAK,MAChB,CAEA,UAAmB,CACf,OAAO,KAAK,MAChB,CAEA,eACA,CACI,OAAO,KAAK,UAChB,CACJ,EAEA,SAASE,EAAmBF,EAC5B,CACI,IAAMG,EAAgB,CAClB,OACJ,EACMC,EAAQ,IAAI,OAAO,+BAA+B,EAClDC,EAAa,IAAI,OAAO,0DAA2D,IAAI,EAGvFC,EAAe,IAAIR,EAAU,EAAG,MAAM,QAAQE,CAAM,QAAQ,EAC5DO,EAAoBC,GACf,OAAO,QAAQA,CAAG,EAAE,OAAO,CAACC,EAAO,CAACC,EAAKC,CAAK,IAAM,CACvD,GAAIA,IAAU,MAAQ,OAAOA,GAAU,SACnCF,EAAM,KAAK,GAAGF,EAAiBI,CAAK,CAAC,UAC9B,OAAOA,GAAU,SACxB,QAASC,KAAKD,EAAM,SAASN,CAAU,EACnCI,EAAM,KAAK,CAAC,GAAGG,CAAC,EAAE,CAAC,CAAC,EAG5B,OAAIR,EAAM,KAAKM,CAAG,GACdD,EAAM,KAAKC,EAAI,QAAQ,QAAS,EAAE,CAAC,EAEhCD,CACX,EAAG,CAAC,CAAC,EAGT,OAAOF,EAAiBD,CAAW,EAAE,OAAQO,GAAS,CAACV,EAAc,SAASU,CAAI,CAAC,CACvF,CAEO,SAASC,EAAKd,KAAiCe,EACtD,CACI,IAAMC,EAAY,OAAO,IAAI,CAAE,IAAKhB,CAAO,EAAG,GAAGe,CAAM,EACvD,OAAO,IAAIhB,EAAaiB,EAAWd,EAAmBc,CAAS,CAAC,CACpE","sourcesContent":["import { XMLParser} from 'fast-xml-parser';\n\nexport class TwigTemplate {\n    constructor(private readonly source: string, private readonly components: string[]) {\n        this.source = source;\n    }\n\n    getSource() {\n        return this.source;\n    }\n\n    toString(): string {\n        return this.source;\n    }\n\n    getComponents(): string[]\n    {\n        return this.components;\n    }\n}\n\nfunction parseSubComponents(source: string)\n{\n    const reservedNames = [\n        'block',\n    ];\n    const tagRe = new RegExp(/twig:[A-Za-z]+(?::[A-Za-z]+)*/);\n    const functionRe = new RegExp(/component\\(\\s*'([A-Za-z]+(?::[A-Za-z]+)*)'\\s*(?:,.*)?\\)/, 'gs');\n\n    // Dummy div tag to handle templates without any tag\n    const documentObj = (new XMLParser()).parse(`<div>${source}</div>`);\n    const lookupComponents = (obj: {[p: string]: any}): string[] => {\n        return Object.entries(obj).reduce((names, [key, value]) => {\n            if (value !== null && typeof value === 'object') {\n                names.push(...lookupComponents(value));\n            } else if (typeof value === 'string') {\n                for (let m of value.matchAll(functionRe)) {\n                    names.push([...m][1]);\n                }\n            }\n            if (tagRe.test(key)) {\n                names.push(key.replace('twig:', ''));\n            }\n            return names;\n        }, []);\n    };\n\n    return lookupComponents(documentObj).filter((name) => !reservedNames.includes(name));\n}\n\nexport function twig(source: TemplateStringsArray, ...values: any[]): TwigTemplate\n{\n    const rawSource = String.raw({ raw: source }, ...values);\n    return new TwigTemplate(rawSource, parseSubComponents(rawSource));\n}\n"]}