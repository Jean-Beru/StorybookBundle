{"version":3,"sources":["../src/utils/twig.ts"],"names":[],"mappings":";AAAA,SAAS,iBAAgB;AAElB,IAAM,eAAN,MAAmB;AAAA,EACtB,YAA6B,QAAiC,YAAsB;AAAvD;AAAiC;AAC1D,SAAK,SAAS;AAAA,EAClB;AAAA,EAEA,YAAY;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,WAAmB;AACf,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,gBACA;AACI,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,SAAS,mBAAmB,QAC5B;AACI,QAAM,gBAAgB;AAAA,IAClB;AAAA,EACJ;AACA,QAAM,QAAQ,IAAI,OAAO,+BAA+B;AACxD,QAAM,aAAa,IAAI,OAAO,2DAA2D,IAAI;AAG7F,QAAM,cAAe,IAAI,UAAU,EAAG,MAAM,QAAQ,MAAM,QAAQ;AAClE,QAAM,mBAAmB,CAAC,QAAsC;AAC5D,WAAO,OAAO,QAAQ,GAAG,EAAE,OAAO,CAAC,OAAO,CAAC,KAAK,KAAK,MAAM;AACvD,UAAI,UAAU,QAAQ,OAAO,UAAU,UAAU;AAC7C,cAAM,KAAK,GAAG,iBAAiB,KAAK,CAAC;AAAA,MACzC,WAAW,OAAO,UAAU,UAAU;AAClC,iBAAS,KAAK,MAAM,SAAS,UAAU,GAAG;AACtC,gBAAM,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;AAAA,QACxB;AAAA,MACJ;AACA,UAAI,MAAM,KAAK,GAAG,GAAG;AACjB,cAAM,KAAK,IAAI,QAAQ,SAAS,EAAE,CAAC;AAAA,MACvC;AACA,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AAEA,SAAO,iBAAiB,WAAW,EAAE,OAAO,CAAC,SAAS,CAAC,cAAc,SAAS,IAAI,CAAC;AACvF;AAEO,SAAS,KAAK,WAAiC,QACtD;AACI,QAAM,YAAY,OAAO,IAAI,EAAE,KAAK,OAAO,GAAG,GAAG,MAAM;AACvD,SAAO,IAAI,aAAa,WAAW,mBAAmB,SAAS,CAAC;AACpE","sourcesContent":["import { XMLParser} from 'fast-xml-parser';\n\nexport class TwigTemplate {\n    constructor(private readonly source: string, private readonly components: string[]) {\n        this.source = source;\n    }\n\n    getSource() {\n        return this.source;\n    }\n\n    toString(): string {\n        return this.source;\n    }\n\n    getComponents(): string[]\n    {\n        return this.components;\n    }\n}\n\nfunction parseSubComponents(source: string)\n{\n    const reservedNames = [\n        'block',\n    ];\n    const tagRe = new RegExp(/twig:[A-Za-z]+(?::[A-Za-z]+)*/);\n    const functionRe = new RegExp(/component\\(\\s*'([A-Za-z]+(?::[A-Za-z]+)*)'\\s*(?:,.*)?\\)/, 'gs');\n\n    // Dummy div tag to handle templates without any tag\n    const documentObj = (new XMLParser()).parse(`<div>${source}</div>`);\n    const lookupComponents = (obj: {[p: string]: any}): string[] => {\n        return Object.entries(obj).reduce((names, [key, value]) => {\n            if (value !== null && typeof value === 'object') {\n                names.push(...lookupComponents(value));\n            } else if (typeof value === 'string') {\n                for (let m of value.matchAll(functionRe)) {\n                    names.push([...m][1]);\n                }\n            }\n            if (tagRe.test(key)) {\n                names.push(key.replace('twig:', ''));\n            }\n            return names;\n        }, []);\n    };\n\n    return lookupComponents(documentObj).filter((name) => !reservedNames.includes(name));\n}\n\nexport function twig(source: TemplateStringsArray, ...values: any[]): TwigTemplate\n{\n    const rawSource = String.raw({ raw: source }, ...values);\n    return new TwigTemplate(rawSource, parseSubComponents(rawSource));\n}\n"]}